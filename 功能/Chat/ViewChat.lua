local _G = _Glocal Timer = Timerlocal Global = _G.Globallocal LuaUtility = CS.Game.LuaUtilitylocal Util = Utillocal getChat = Global.GetChatSDKlocal SdkEvent = SdkEventlocal bind = require("xlua.util").bindlocal MessageType = {    OTHER = 1, --他人    SELF = 2, --自己}--根据字符串行数确定Layout Element间距local LayoutHeight = {    [1] = 100,    [2] = 130,    [3] = 160,}--发言间隔local silentTime = 3local function getLayoutHeight(str)    local lineNum = LuaUtility.GetStrLines(str)    if lineNum == 0 then        lineNum = 1    end    if lineNum > 3 then        lineNum = 3    end    return LayoutHeight[lineNum]end--===========================local ViewChatItem = class("ViewChatItem", require("app.ui.UiHandler"))--msgInfo={type,name,message}function ViewChatItem:Load(msgInfo, luaItem)    luaItem.Data:Inject(self)    if msgInfo.type == MessageType.OTHER then        LuaUtility.TextSetTxt(self.otherName,msgInfo.name)        LuaUtility.TextSetTxt(self.otherText,msgInfo.message)    else        LuaUtility.TextSetTxt(self.ownName,msgInfo.name)        LuaUtility.TextSetTxt(self.ownText,msgInfo.message)    end    local height = getLayoutHeight(msgInfo.message)    LuaUtility.SetLayoutHeight(self.layout, height)    LuaUtility.ComponentGameObjVisible(self.otherPart, msgInfo.type == MessageType.OTHER)    LuaUtility.ComponentGameObjVisible(self.ownPart, msgInfo.type == MessageType.SELF)endfunction ViewChatItem:Release()end--===========================local ViewChat = class("ViewChat",require("app.ui.UiView"))ViewChat.res = "viewchat"function ViewChat:OnOpen()    self:RegisterButtonClick(self.logBtn,self.OnLogClick)    self:RegisterButtonClick(self.closeBtn,self.OnCloseClick)    self:RegisterButtonClick(self.maskBtn,self.OnCloseClick)    self:RegisterButtonClick(self.sendBtn,self.OnSendClick)    Global:AddEventListener(SdkEvent.CHAT_RECEIVECHANNEL,self.ChannelMessageNotify,self)    getChat():BindGetCachedHistoryMessage(bind(self.GetCachedMessageNotify,self))    self:InitChatList()    getChat():GetCachedHistoryMessages()    LuaUtility.InputFieldSetText(self.input)    self:FinishSilentTime()endfunction ViewChat:OnClose()    self:UnregisterButtonClick(self.logBtn)    self:UnregisterButtonClick(self.closeBtn)    self:UnregisterButtonClick(self.maskBtn)    self:UnregisterButtonClick(self.sendBtn)    Global:RemoveEventListener(SdkEvent.CHAT_RECEIVECHANNEL,self.ChannelMessageNotify,self)    getChat():BindGetCachedHistoryMessage(nil)    self:ReleaseChatList()    self:ReleaseSilentTimer()end--登陆function ViewChat:OnLogClick()    local usrIdStr = Global.GetUser():GetIdStr()    getChat():Login(usrIdStr,usrIdStr)end--登出function ViewChat:OnCloseClick()    self:Close()end--发送function ViewChat:OnSendClick()    local text = LuaUtility.InputFieldGetText(self.input)    if not LuaUtility.IsStrNull(text) then        local messageText = LuaUtility.ConvertStrFormat(text)        ---todo:获取自己姓名        self:AddChatMsg(false,"jack",messageText)        --getChat():SendChannelTextMessage("jack",messageText)        LuaUtility.InputFieldSetText(self.input)        LuaUtility.SetButtonInteractable(self.sendBtn, false)        --if not self.silentTimer then            self.silentTimer = Timer.Once(silentTime,self.FinishSilentTime,self)        --end        self.silentTimer:Start()    endendfunction ViewChat:FinishSilentTime()    LuaUtility.SetButtonInteractable(self.sendBtn, true)endfunction ViewChat:ReleaseSilentTimer()    if self.silentTimer then        self.silentTimer:Stop()        self.silentTimer = nil    endend--region 消息文字相关--初始化chatContentListfunction ViewChat:InitChatList()    self.chatItems = Util.CreateListViewItems(self.contentList,nil,ViewChatItem)endfunction ViewChat:ReleaseChatList()    if self.chatItems then        for _, item in pairs(self.chatItems) do            item:Release()        end    end    self.chatItems=nil    LuaUtility.ReleaseLuaSimpleList(self.contentList)end--message数据格式local messageInfo = {["type"]=nil,["name"]=nil,["message"]=nil}function ViewChat:AddChatMsg(isOther,name,message)    messageInfo.type = isOther and MessageType.OTHER or MessageType.SELF    messageInfo.name = name    messageInfo.message = message    Util.ListViewAddItem(self.chatItems,self.contentList,messageInfo,ViewChatItem)    LuaUtility.ScrollRectSetPos(self.scroll,0,true,true)end--endregion---region Callback--接受信息function ViewChat:ChannelMessageNotify(name,message)    self:AddChatMsg(true,name,message)endfunction ViewChat:GetCachedMessageNotify(isOther,name,message)    self:AddChatMsg(isOther,name,message)end---endregion_G.ViewChat = ViewChat